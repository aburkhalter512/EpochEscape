using UnityEngine;
using System.Collections;
using G = GameManager;

public class Player : MonoBehaviour
{
    #region Inspector Variables
    public float mForce = FORCE;
    public float mDynamicFriction = DYNAMIC_FRICTION;
    public float mAirResistance = AIR_RESTIANCE_MODIFIER;

    public bool m_isMoving;
    public bool m_isDetected;
    public bool m_isWithinEarshot;

    public float m_detectionLevel = 0f;
	public float m_detectionRate = 25f; // rate/second at which character becomes detected by cameras

	public PlayerState m_currentState;
	public Vector3 m_spawnLocation;

	public Inventory inventory;
	private int m_selectedSlot; // only private because not yet necessary
	public int m_specItems;
	#endregion

    #region Instance Variables
    private Animator m_animator;

    private Vector3 transForces = Vector3.zero; //Translation forces
    private Vector3 velocity = Vector3.zero;
	#endregion

	#region Class Constants
    public const float SPEED = 1.5f;
    public const float FORCE = 1.0f;
    public const float DYNAMIC_FRICTION = 1.0f;
    public const float AIR_RESTIANCE_MODIFIER = 0.5f;
	public const float MAX_DETECTION_LEVEL = 100.0f;

	public enum PlayerState
	{
		ALIVE,
		DEAD,
		RESPAWNING
	}
	#endregion

    #region Class Variables
    public static float detectionLevel = 0.0f;
    #endregion

    //Put all initialization code here
	//Remember to comment!
	protected void Start()
	{
		m_animator = GetComponent<Animator>();
		m_isMoving = false;
		m_isDetected = false;
		m_isWithinEarshot = false;
		m_currentState = PlayerState.ALIVE;

		inventory = new Inventory();
		m_selectedSlot = 0;
	}

	#region Initialization Methods
	#endregion

	//Put all update code here
	//Remember to comment!
	protected void Update()
	{
		UpdateCurrentState();
	}

	private void UpdateCurrentState()
	{
		switch(m_currentState)
		{
		case PlayerState.ALIVE:
			Alive();
			break;

		case PlayerState.DEAD:
			Dead();
			break;
		}
	}

	private void Alive()
	{
		UpdateUserControl();
		UpdateDetection();
		ApplyEnvironmentalForces();
		
		ApplyForces();
		UpdateAnimator();
		
		// Putting the camera update here for now... Most likely will be put in a CameraManager class.
		Camera.main.transform.position = new Vector3(transform.position.x, transform.position.y, Camera.main.transform.position.z);

		/* Alternate Camera Movement
 		Vector3 currentCameraPosition = Camera.main.transform.position;
		Vector3 targetCameraPosition = new Vector3(transform.position.x, transform.position.y, currentCameraPosition.z);

		Camera.main.transform.position = Vector3.Lerp(currentCameraPosition, targetCameraPosition, Time.deltaTime);
		*/
	}

	private void Dead()
	{
		m_currentState = PlayerState.ALIVE;

		gameObject.transform.position 
= m_spawnLocation;
	}
	#region Update Methods
    #region UpdateUserControl
    private void UpdateUserControl()
	{
<<<<<<< HEAD
		if(!G.getInstance().paused)
=======
		if(!G.getInstance ().paused)
>>>>>>> ff760f78c93a276961ca5361d4030eee5e8fabaf
		{
			UpdateMouse();
			UpdateKeyboard();
		}
	}
	
	private void UpdateMouse()
	{
		Vector3 mouseScreenPosition = new Vector3(Input.mousePosition.x, Input.mousePosition.y, 0f);
		Vector3 mouseWorldPosition = Camera.main.ScreenToWorldPoint(mouseScreenPosition);
		Vector3 toMousePosition = mouseWorldPosition - transform.renderer.bounds.center;
		toMousePosition.z = 0f;

		CircleCollider2D playerCollider = GetComponent<CircleCollider2D>();

		if(playerCollider != null && toMousePosition.magnitude > playerCollider.radius)
		{
			toMousePosition.Normalize();
			
			transform.up = toMousePosition;
		}
	}
	
	private void UpdateKeyboard()
	{	
		Vector3 movement = Vector3.zero;
		
		m_isMoving = false;
		
		if(Input.GetKey(KeyCode.W))
            movement.y = mForce * mDynamicFriction;
		else if(Input.GetKey(KeyCode.S))
            movement.y = -mForce * mDynamicFriction;
		
		if(Input.GetKey(KeyCode.A))
            movement.x = -mForce * mDynamicFriction;
		else if(Input.GetKey(KeyCode.D))
            movement.x = mForce * mDynamicFriction;

        transForces += movement;
        transForces -= Utilities.toVector3(velocity * mDynamicFriction);

		m_isMoving = Mathf.Approximately(movement.sqrMagnitude, 0f) ? false : true;

		SelectSlot();

		if(Input.GetButtonDown("Fire1"))
			inventory.activateItem(m_selectedSlot);
	}
    #endregion

	#region UpdateDetection
	private void UpdateDetection() 
	{
		if (m_isDetected) {
			m_detectionLevel += m_detectionRate * Time.deltaTime;
			if (m_detectionLevel >= MAX_DETECTION_LEVEL) {
				//the player dies
			}
		}
	}
	#endregion

    #region ApplyEnvironmentalForces methods
    void ApplyEnvironmentalForces()
    {
        ApplyAirResistance();
    }

    void ApplyAirResistance()
    {
        transForces -= Utilities.toVector3(rigidbody2D.velocity * mAirResistance);
    }
    #endregion

    protected void ApplyForces()
    {
        velocity += transForces;
        transForces = Vector3.zero;

        rigidbody2D.AddForce(velocity * rigidbody2D.mass);
    }

    private void UpdateAnimator()
	{
		if(m_animator != null)
			m_animator.SetBool("isMoving", m_isMoving);
	}

	private void SelectSlot()
	{
		m_selectedSlot = 0; //currently only one item can be used (potion)
//		if(Input.GetKeyDown(KeyCode.Alpha1))
//			m_selectedSlot = 0;
//		else if(Input.GetKeyDown(KeyCode.Alpha2))
//			m_selectedSlot = 1;
	}
	#endregion

	#region Static Methods
	#endregion

	#region Utilities
	#endregion
}
